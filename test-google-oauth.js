const { query } = require('./config/database');
const logger = require('./config/logger');

// Test de la configuration Google OAuth
async function testGoogleOAuthConfig() {
  console.log('üîç Test de la configuration Google OAuth...\n');
  
  // V√©rifier les variables d'environnement
  console.log('üìã Variables d\'environnement:');
  console.log(`- GOOGLE_CLIENT_ID: ${process.env.GOOGLE_CLIENT_ID ? '‚úÖ D√©fini' : '‚ùå Manquant'}`);
  console.log(`- GOOGLE_CLIENT_SECRET: ${process.env.GOOGLE_CLIENT_SECRET ? '‚úÖ D√©fini' : '‚ùå Manquant'}`);
  console.log(`- BASE_URL: ${process.env.BASE_URL || '‚ùå Manquant'}`);
  console.log(`- FRONTEND_URL: ${process.env.FRONTEND_URL || '‚ùå Manquant'}`);
  console.log(`- JWT_SECRET: ${process.env.JWT_SECRET ? '‚úÖ D√©fini' : '‚ùå Manquant'}\n`);
  
  // V√©rifier la configuration de la base de donn√©es
  try {
    const users = await query('SELECT COUNT(*) as count FROM users');
    console.log(`üìä Nombre d'utilisateurs en base: ${users[0].count}`);
    
    // V√©rifier les utilisateurs Google
    const googleUsers = await query('SELECT COUNT(*) as count FROM users WHERE google_id IS NOT NULL');
    console.log(`üîó Utilisateurs Google: ${googleUsers[0].count}`);
    
    // V√©rifier la structure de la table users
    const userStructure = await query('DESCRIBE users');
    console.log('\nüìã Structure de la table users:');
    userStructure.forEach(field => {
      console.log(`  - ${field.Field}: ${field.Type} ${field.Null === 'NO' ? '(NOT NULL)' : ''}`);
    });
    
  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification de la base de donn√©es:', error.message);
  }
  
  // URLs de redirection
  console.log('\nüåê URLs de redirection:');
  console.log(`- Callback URL: ${process.env.BASE_URL}/api/auth/google/callback`);
  console.log(`- Frontend Auth Callback: ${process.env.FRONTEND_URL}/auth/callback`);
  console.log(`- Frontend Choose Class: ${process.env.FRONTEND_URL}/choose-class`);
  
  // Configuration Google Console
  console.log('\n‚öôÔ∏è  Configuration requise dans Google Console:');
  console.log('1. Aller sur https://console.developers.google.com/');
  console.log('2. S√©lectionner votre projet');
  console.log('3. Aller dans "Identifiants" > "OAuth 2.0 Client IDs"');
  console.log('4. V√©rifier que l\'URI de redirection autoris√©e est:');
  console.log(`   ${process.env.BASE_URL}/api/auth/google/callback`);
  console.log('5. V√©rifier que les domaines autoris√©s incluent:');
  console.log(`   ${process.env.FRONTEND_URL}`);
  
  console.log('\n‚úÖ Test termin√©!');
}

// Ex√©cuter le test
testGoogleOAuthConfig().catch(console.error);
